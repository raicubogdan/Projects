import os
import shutil
from send2trash import send2trash


def copy():
    """
    Copies files by extension from a directory tree to another.
    If the destination directory doesn't exist, it is created.
    """

    ext = input('File extension name: ')
    src = input(f'\nType the parent directory you want to copy from (absolute path): ')
    dest = input('\nType the destination folder (absolute path). '
                 'If the directory does not exist, it will be created: \n>>')

    if os.path.isdir(dest):
        pass
    else:
        try:
            os.mkdir(dest)
        except Exception:
            print('Not a valid destination.')
            return

    for root, _, filenames in os.walk(src):
        for filename in filenames:
            if filename.endswith(ext):
                shutil.copy(os.path.join(root, filename), dest)

def cut():
    """
    Cuts files by extension from a directory tree to another directory.
    If the destination directory doesn't exist, it is created.
    """

    ext = input('File extension name: ')
    src = input(f'\nType the parent directory you want to cut files from (absolute path): ')
    dest = input('\nType the destination directory (absolute path). '
                 'If the directory does not exist, it will be created: \n>>')

    if os.path.isdir(dest):
        pass
    else:
        try:
            os.mkdir(dest)
        except Exception:
            print('Not a valid destination.')
            return

    for root, _, filenames in os.walk(src):
        for filename in filenames:
            try:
                if filename.endswith(ext):
                    shutil.move(os.path.join(root, filename), dest)
            except Exception:
                continue

def delete():
    """
    Deletes files from a directory tree.
    Deleted files are sent to trash in order to prevent unintended file loss.
    """

    src = input(f'Type the parent directory you want to delete from (absolute path): ')
    mode = input('\nWARNING: ALL FILES FROM DIRECTORY WITH KEYWORD IN NAME WILL BE SENT TO TRASH:\n'
                f'-\n{src}\n-'
                 '\nIF YOU WANT TO RECOVER OR PERMANENTLY DELETE, CHECK TRASH\n'
                 '\nHow do you want delete? (choose option number):\n'
                 '1. Delete by name\n'
                 '2. Delete by name part\n'
                 '3. Delete by extension\n'
                 '4. Return to file manager\n>> ')

    if mode not in '12345':
        print('Not a valid option.')
        return

    elif mode == '1':
        name = input('Type file name: ')
        for root, _, filenames in os.walk(src):
            for filename in filenames:
                if filename.startswith(name):
                    send2trash(os.path.join(root, filename))

    elif mode == '2':
        part = input('\nType name part: ')
        for root, _, filenames in os.walk(src):
            filtered = list(filter(lambda file: part in file, filenames))
            for filename in filtered:
                send2trash(os.path.join(root, filename))

    elif mode == '3':
        ext = input('\nType file extension: ')
        for root, _, filenames in os.walk(src):
            for filename in filenames:
                if filename.endswith(ext):
                    send2trash(os.path.join(root, filename))

def rename():
    """
    Renames all the files from a directory tree.
    New names consists of "filename<auto-generated-index>.extension"
    """

    src = input(f'Type the parent directory containing the files to be renamed (absolute path): ')
    identifier = input('Type filename or part of filename to identify the files to be renamed: ')
    name = input('Type new filename (it will be ordered by index i.e: "filename1.txt): ')

    for root, _, filenames in os.walk(src):
        filtered = list(filter(lambda file: identifier in file, filenames))
        for idx, filename in enumerate(filtered):
            try:
                split = filename.split('.')
                shutil.move(os.path.join(root, filename), 
                            os.path.join(root, f'{name}{idx}.{split[-1]}'))
            except Exception:
                continue
